{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jorge castillo/Documents/Sandbox/jumbo-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class LoginComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.userName = new FormControl('', Validators.required);\n    this.password = new FormControl('', Validators.required);\n    this.form = new FormGroup({\n      userName: this.userName,\n      password: this.password\n    });\n  }\n\n  ngOnInit() {}\n\n  getUsername() {\n    return this.form.get('userName');\n  }\n\n  getPassword() {\n    return this.form.get('password');\n  }\n\n  onSubmit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      let password = (_a = _this.getPassword()) === null || _a === void 0 ? void 0 : _a.value;\n      let username = (_b = _this.getUsername()) === null || _b === void 0 ? void 0 : _b.value;\n      localStorage.clear();\n      console.log(_this.form.getRawValue());\n      const resp = yield _this.http.post(environment.backend + \"/login\", _this.form.getRawValue()).toPromise();\n\n      if (resp) {\n        console.log(\"response ->\", resp.jwt);\n        localStorage.setItem('token', resp.jwt);\n\n        _this.router.navigate(['/']);\n      }\n    })();\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"h3\", \"mb-3\", \"fw-normal\"], [\"formControlName\", \"userName\", \"placeholder\", \"Name\", \"required\", \"\", 1, \"form-control\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"w-100\", \"btn\", \"btn-lg\", \"btn-primary\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Please sign in\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"input\", 2);\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelementStart(5, \"button\", 4);\n      i0.ɵɵtext(6, \"Sign in\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n    }\n  },\n  directives: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlName, i3.RequiredValidator],\n  styles: [\".form-signin[_ngcontent-%COMP%] {\\r\\n  width: 100%;\\r\\n  max-width: 330px;\\r\\n  padding: 15px;\\r\\n  margin: auto;\\r\\n}\\r\\n\\r\\n.form-signin[_ngcontent-%COMP%]   .checkbox[_ngcontent-%COMP%] {\\r\\n  font-weight: 400;\\r\\n}\\r\\n\\r\\n.form-signin[_ngcontent-%COMP%]   .form-floating[_ngcontent-%COMP%]:focus-within {\\r\\n  z-index: 2;\\r\\n}\\r\\n\\r\\n.form-signin[_ngcontent-%COMP%]   input[type=\\\"email\\\"][_ngcontent-%COMP%] {\\r\\n  margin-bottom: -1px;\\r\\n  border-bottom-right-radius: 0;\\r\\n  border-bottom-left-radius: 0;\\r\\n}\\r\\n\\r\\n.form-signin[_ngcontent-%COMP%]   input[type=\\\"password\\\"][_ngcontent-%COMP%] {\\r\\n  margin-bottom: 10px;\\r\\n  border-top-left-radius: 0;\\r\\n  border-top-right-radius: 0;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFXO0VBQ1gsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsNkJBQTZCO0VBQzdCLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQix5QkFBeUI7RUFDekIsMEJBQTBCO0FBQzVCIiwiZmlsZSI6ImxvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZm9ybS1zaWduaW4ge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIG1heC13aWR0aDogMzMwcHg7XHJcbiAgcGFkZGluZzogMTVweDtcclxuICBtYXJnaW46IGF1dG87XHJcbn1cclxuXHJcbi5mb3JtLXNpZ25pbiAuY2hlY2tib3gge1xyXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbn1cclxuXHJcbi5mb3JtLXNpZ25pbiAuZm9ybS1mbG9hdGluZzpmb2N1cy13aXRoaW4ge1xyXG4gIHotaW5kZXg6IDI7XHJcbn1cclxuXHJcbi5mb3JtLXNpZ25pbiBpbnB1dFt0eXBlPVwiZW1haWxcIl0ge1xyXG4gIG1hcmdpbi1ib3R0b206IC0xcHg7XHJcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XHJcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcclxufVxyXG5cclxuLmZvcm0tc2lnbmluIGlucHV0W3R5cGU9XCJwYXNzd29yZFwiXSB7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xyXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xyXG59Il19 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\jorge castillo\\Documents\\Sandbox\\jumbo-frontend\\src\\app\\login\\login.component.ts","C:\\Users\\jorge castillo\\Documents\\Sandbox\\jumbo-frontend\\src\\app\\login\\login.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\n\nexport interface TokenResponse{\n  jwt: string\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  form: FormGroup;\n  userName:FormControl;\n  password:FormControl;\n  \n\n  constructor(private http:HttpClient,private router:Router) { \n    this.userName =new FormControl('',Validators.required);\n    this.password=new FormControl('',Validators.required);\n\n    this.form =new FormGroup({\n      userName:this.userName ,\n      password: this.password\n    });\n\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  getUsername(){return this.form.get('userName');}\n  getPassword(){return this.form.get('password');}\n\n   async onSubmit() {\n    let password=this.getPassword()?.value;\n    let username=this.getUsername()?.value;\n    localStorage.clear();\n    console.log(this.form.getRawValue());\n    const resp= await this.http.post<TokenResponse>(environment.backend+\"/login\",this.form.getRawValue()).toPromise();\n\n    if(resp){\n      console.log(\"response ->\",resp.jwt)\n      localStorage.setItem('token',resp.jwt);\n      this.router.navigate(['/']);\n\n    }\n    \n  }\n  \n}\n","    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <h1 class=\"h3 mb-3 fw-normal\">Please sign in</h1>\n  \n        <input formControlName=\"userName\" class=\"form-control\"  placeholder=\"Name\" required>\n\n        <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" required>\n\n      <button class=\"w-100 btn btn-lg btn-primary\" type=\"submit\">Sign in</button>\n    </form>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}